# Environments
# SKIP_TEST=true|false - skip testing step
# SKIP_IMAGE=true|false - skip building image
# SKIP_PUBLISH_QUAY=true|false - skip publishing in Quay
# SKIP_PUBLISH_GHCR=true|false - skip publishing in GitHub
# SKIP_PUBLISH_ECR=true|false - skip publishing in AWS Public ECR
# APP_TAG=0.0.1 - override CI_COMMIT_TAG var, application release version

variables:
  - &golang_image 'public.ecr.aws/docker/library/golang:1.22.4-bookworm'
  - &kaniko_image "gcr.io/kaniko-project/executor:v1.23.1-debug"
  - &skopeo_image "quay.io/containers/skopeo:v1.15.1"
  - &awscli_image "public.ecr.aws/aws-cli/aws-cli:2.15.62"

matrix:
  APP_COMPONENT:
    - init
    - k8s-health
    - lock

when:
  - branch: main
    event:
      - manual
      - tag
  - branch:
      exclude: main
    event:
      - manual
      - push

steps:
  set-env:
    image: debian:bookworm-slim
    commands:
      - .cicd/set-env.sh
  test:
    when:
      evaluate: 'SKIP_TEST != "true"'
    image: *golang_image
    commands:
      - .cicd/test.sh
  build:
    image: *golang_image
    commands:
      - .cicd/build.sh
  image:
    when:
      evaluate: 'SKIP_IMAGE != "true"'
    image: *kaniko_image
    environment:
      DOCKER_USR:
        from_secret: fb_harbor_usr
      DOCKER_PWD:
        from_secret: fb_harbor_pwd
    commands:
      - .cicd/set-docker-auth.sh
      - .cicd/image.sh
  image-debug:
    when:
      evaluate: 'SKIP_IMAGE != "true"'
    image: *kaniko_image
    environment:
      IMAGE_DEBUG: true
      DOCKER_USR:
        from_secret: fb_harbor_usr
      DOCKER_PWD:
        from_secret: fb_harbor_pwd
    commands:
      - .cicd/set-docker-auth.sh
      - .cicd/image.sh
  publish-quay:
    when:
      evaluate: 'SKIP_PUBLISH_QUAY != "true"'
    image: *skopeo_image
    environment:
      QUAY_CREDS:
        from_secret: fb_quay_creds
    commands:
      - .cicd/publish-quay.sh
  publish-ghcr:
    when:
      evaluate: 'SKIP_PUBLISH_GHCR != "true"'
    image: *skopeo_image
    environment:
      GHCR_CREDS:
        from_secret: fb_ghcr_creds
    commands:
      - .cicd/publish-ghcr.sh
  get-aws-auth:
    when:
      evaluate: 'SKIP_PUBLISH_ECR != "true"'
    image: *awscli_image
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: fb_ecr_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: fb_ecr_key
    commands:
      - .cicd/get-aws-ecr-pwd.sh
  publish-ecr:
    when:
      evaluate: 'SKIP_PUBLISH_ECR != "true"'
    image: *skopeo_image
    commands:
      - .cicd/publish-ecr.sh
